// IDL example

constructor {
  New : (name: str, symbol: str, decimals: u8);
};

service Vft {
  Burn : (from: actor_id, value: u256) -> bool;
  GrantAdminRole : (to: actor_id) -> null;
  GrantBurnerRole : (to: actor_id) -> null;
  GrantMinterRole : (to: actor_id) -> null;
  Mint : (to: actor_id, value: u256) -> bool;
  RevokeAdminRole : (from: actor_id) -> null;
  RevokeBurnerRole : (from: actor_id) -> null;
  RevokeMinterRole : (from: actor_id) -> null;
  Approve : (spender: actor_id, value: u256) -> bool;
  Transfer : (to: actor_id, value: u256) -> bool;
  TransferFrom : (from: actor_id, to: actor_id, value: u256) -> bool;
  query Admins : () -> vec actor_id;
  query Balances : () -> vec struct { actor_id, nat256 };
  query Burners : () -> vec actor_id;
  query Minters : () -> vec actor_id;
  query Allowance : (owner: actor_id, spender: actor_id) -> u256;
  query BalanceOf : (account: actor_id) -> u256;
  query Decimals : () -> u8;
  query Name : () -> str;
  query Symbol : () -> str;
  query TotalSupply : () -> u256;

  events {
    Minted: struct { to: actor_id, value: u256 };
    Burned: struct { from: actor_id, value: u256 };
    Approval: struct { owner: actor_id, spender: actor_id, value: u256 };
    Transfer: struct { from: actor_id, to: actor_id, value: u256 };
  }
};


// Client example in ./client.ts

import { GearApi, decodeAddress } from '@gear-js/api';
import { TypeRegistry } from '@polkadot/types';
import { TransactionBuilder, ActorId, getServiceNamePrefix, getFnNamePrefix, ZERO_ADDRESS } from 'sails-js';

const types = {
  Minted:   { to: '[u8;32]',                    value: 'U256' },
  Burned:   { from: '[u8;32]',                  value: 'U256' },
  Approval: { owner: '[u8;32]', spender: '[u8;32]', value: 'U256' },
  Transfer: { from: '[u8;32]', to: '[u8;32]',  value: 'U256' },
};

type MintedEvent   = { to: ActorId;                    value: bigint };
type BurnedEvent   = { from: ActorId;                  value: bigint };
type ApprovalEvent = { owner: ActorId; spender: ActorId; value: bigint };
type TransferEvent = { from: ActorId; to: ActorId;      value: bigint };

export class Program {
  public readonly registry: TypeRegistry;
  public readonly vft: Service;
  constructor(public api: GearApi, private _programId?: `0x${string}`) {
    this.registry = new TypeRegistry();
    this.registry.setKnownTypes({ types });
    this.registry.register(types);
    this.vft = new Service(this);
  }
  public get programId(): `0x${string}` {
    if (!this._programId) throw new Error('Program ID is not set');
    return this._programId;
  }
  newCtorFromCode(code: Uint8Array | Buffer, name: string, symbol: string, decimals: number): TransactionBuilder<null> {
    const builder = new TransactionBuilder<null>(
      this.api,
      this.registry,
      'upload_program',
      ['New', name, symbol, decimals],
      '(String, String, String, u8)',
      'String',
      code
    );
    this._programId = builder.programId;
    return builder;
  }
  newCtorFromCodeId(codeId: `0x${string}`, name: string, symbol: string, decimals: number): TransactionBuilder<null> {
    const builder = new TransactionBuilder<null>(
      this.api,
      this.registry,
      'create_program',
      ['New', name, symbol, decimals],
      '(String, String, String, u8)',
      'String',
      codeId
    );
    this._programId = builder.programId;
    return builder;
  }
}

export class Service {
  constructor(private _program: Program) {}
  private decodeEvent<E>(sig: string, payload: Uint8Array): E {
    const [, , codec] = this._program.registry.createType(sig, payload) as unknown as [unknown, unknown, { toJSON(): unknown }];
    return codec.toJSON() as E;
  }

  public burn(from: ActorId, value: number | string | bigint): TransactionBuilder<boolean> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<boolean>(this._program.api, this._program.registry, 'send_message', ['Vft', 'Burn', from, value], '(String, String, [u8;32], U256)', 'bool', this._program.programId);
  }
  public grantAdminRole(to: ActorId): TransactionBuilder<null> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<null>(this._program.api, this._program.registry, 'send_message', ['Vft', 'GrantAdminRole', to], '(String, String, [u8;32])', 'Null', this._program.programId);
  }
  public grantBurnerRole(to: ActorId): TransactionBuilder<null> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<null>(this._program.api, this._program.registry, 'send_message', ['Vft', 'GrantBurnerRole', to], '(String, String, [u8;32])', 'Null', this._program.programId);
  }
  public grantMinterRole(to: ActorId): TransactionBuilder<null> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<null>(this._program.api, this._program.registry, 'send_message', ['Vft', 'GrantMinterRole', to], '(String, String, [u8;32])', 'Null', this._program.programId);
  }
  public mint(to: ActorId, value: number | string | bigint): TransactionBuilder<boolean> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<boolean>(this._program.api, this._program.registry, 'send_message', ['Vft', 'Mint', to, value], '(String, String, [u8;32], U256)', 'bool', this._program.programId);
  }
  public revokeAdminRole(from: ActorId): TransactionBuilder<null> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<null>(this._program.api, this._program.registry, 'send_message', ['Vft', 'RevokeAdminRole', from], '(String, String, [u8;32])', 'Null', this._program.programId);
  }
  public revokeBurnerRole(from: ActorId): TransactionBuilder<null> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<null>(this._program.api, this._program.registry, 'send_message', ['Vft', 'RevokeBurnerRole', from], '(String, String, [u8;32])', 'Null', this._program.programId);
  }
  public revokeMinterRole(from: ActorId): TransactionBuilder<null> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<null>(this._program.api, this._program.registry, 'send_message', ['Vft', 'RevokeMinterRole', from], '(String, String, [u8;32])', 'Null', this._program.programId);
  }
  public approve(spender: ActorId, value: number | string | bigint): TransactionBuilder<boolean> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<boolean>(this._program.api, this._program.registry, 'send_message', ['Vft', 'Approve', spender, value], '(String, String, [u8;32], U256)', 'bool', this._program.programId);
  }
  public transfer(to: ActorId, value: number | string | bigint): TransactionBuilder<boolean> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<boolean>(this._program.api, this._program.registry, 'send_message', ['Vft', 'Transfer', to, value], '(String, String, [u8;32], U256)', 'bool', this._program.programId);
  }
  public transferFrom(from: ActorId, to: ActorId, value: number | string | bigint): TransactionBuilder<boolean> {
    if (!this._program.programId) throw new Error('Program ID is not set');
    return new TransactionBuilder<boolean>(this._program.api, this._program.registry, 'send_message', ['Vft', 'TransferFrom', from, to, value], '(String, String, [u8;32], [u8;32], U256)', 'bool', this._program.programId);
  }

  public async admins(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<ActorId[]> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Admins']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, Vec<[u8;32]>)', reply.payload);
    return result[2].toJSON() as ActorId[];
  }
  public async burners(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<ActorId[]> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Burners']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, Vec<[u8;32]>)', reply.payload);
    return result[2].toJSON() as ActorId[];
  }
  public async minters(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<ActorId[]> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Minters']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, Vec<[u8;32]>)', reply.payload);
    return result[2].toJSON() as ActorId[];
  }
  public async allowance(owner: ActorId, spender: ActorId, originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<bigint> {
    const payload = this._program.registry.createType('(String, String, [u8;32], [u8;32])', ['Vft', 'Allowance', owner, spender]).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, U256)', reply.payload);
    return result[2].toBigInt();
  }
  public async balanceOf(account: ActorId, originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<bigint> {
    const payload = this._program.registry.createType('(String, String, [u8;32])', ['Vft', 'BalanceOf', account]).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, U256)', reply.payload);
    return result[2].toBigInt();
  }
  public async decimals(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<number> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Decimals']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, u8)', reply.payload);
    return result[2].toNumber();
  }
  public async name(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<string> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Name']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, String)', reply.payload);
    return result[2].toString();
  }
  public async symbol(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<string> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Symbol']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, String)', reply.payload);
    return result[2].toString();
  }
  public async totalSupply(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<bigint> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'TotalSupply']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, U256)', reply.payload);
    return result[2].toBigInt();
  }
  public async balances(originAddress?: string, value?: number | string | bigint, atBlock?: `0x${string}`): Promise<Array<[ActorId, bigint]>> {
    const payload = this._program.registry.createType('(String, String)', ['Vft', 'Balances']).toHex();
    const reply = await this._program.api.message.calculateReply({ destination: this._program.programId, origin: originAddress ? decodeAddress(originAddress) : ZERO_ADDRESS, payload, value: value ?? 0, gasLimit: this._program.api.blockGasLimit.toBigInt(), at: atBlock ?? null });
    if (!reply.code.isSuccess) throw new Error(this._program.registry.createType('String', reply.payload).toString());
    const result = this._program.registry.createType('(String, String, Vec<([u8;32], U256)>)', reply.payload);
    return result[2].toJSON() as Array<[ActorId, bigint]>;
  }

  public subscribeToMintedEvent(callback: (data: MintedEvent) => void | Promise<void>): Promise<() => void> {
    return this._program.api.gearEvents.subscribeToGearEvent('UserMessageSent', ({ data: { message } }) => {
      if (!message.source.eq(this._program.programId) || !message.destination.eq(ZERO_ADDRESS)) return;
      const payload = message.payload.toHex();
      if (getServiceNamePrefix(payload) === 'Vft' && getFnNamePrefix(payload) === 'Minted') {
        void Promise.resolve(callback(this.decodeEvent<MintedEvent>('(String, String, Minted)', message.payload))).catch(console.error);
      }
    });
  }
  public subscribeToBurnedEvent(callback: (data: BurnedEvent) => void | Promise<void>): Promise<() => void> {
    return this._program.api.gearEvents.subscribeToGearEvent('UserMessageSent', ({ data: { message } }) => {
      if (!message.source.eq(this._program.programId) || !message.destination.eq(ZERO_ADDRESS)) return;
      const payload = message.payload.toHex();
      if (getServiceNamePrefix(payload) === 'Vft' && getFnNamePrefix(payload) === 'Burned') {
        void Promise.resolve(callback(this.decodeEvent<BurnedEvent>('(String, String, Burned)', message.payload))).catch(console.error);
      }
    });
  }
  public subscribeToApprovalEvent(callback: (data: ApprovalEvent) => void | Promise<void>): Promise<() => void> {
    return this._program.api.gearEvents.subscribeToGearEvent('UserMessageSent', ({ data: { message } }) => {
      if (!message.source.eq(this._program.programId) || !message.destination.eq(ZERO_ADDRESS)) return;
      const payload = message.payload.toHex();
      if (getServiceNamePrefix(payload) === 'Vft' && getFnNamePrefix(payload) === 'Approval') {
        void Promise.resolve(callback(this.decodeEvent<ApprovalEvent>('(String, String, Approval)', message.payload))).catch(console.error);
      }
    });
  }
  public subscribeToTransferEvent(callback: (data: TransferEvent) => void | Promise<void>): Promise<() => void> {
    return this._program.api.gearEvents.subscribeToGearEvent('UserMessageSent', ({ data: { message } }) => {
      if (!message.source.eq(this._program.programId) || !message.destination.eq(ZERO_ADDRESS)) return;
      const payload = message.payload.toHex();
      if (getServiceNamePrefix(payload) === 'Vft' && getFnNamePrefix(payload) === 'Transfer') {
        void Promise.resolve(callback(this.decodeEvent<TransferEvent>('(String, String, Transfer)', message.payload))).catch(console.error);
      }
    });
  }
}
